// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TouristAppBackend.Persistance;

namespace TouristAppBackend.Persistance.Migrations
{
    [DbContext(typeof(TouristAppContext))]
    [Migration("20220703094734_changes")]
    partial class changes
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("IdentityRole");

                    b.HasData(
                        new
                        {
                            Id = "2573df8e-0d5a-4556-b220-f80272ef450c",
                            ConcurrencyStamp = "b2438fec-bc1f-4659-9e9d-61e4693952bd",
                            Name = "RegisteredUser",
                            NormalizedName = "REGISTEREDUSER"
                        },
                        new
                        {
                            Id = "d8b59344-d8ff-4d24-83c3-abdfa98a423c",
                            ConcurrencyStamp = "897441a3-9d1f-4b99-9faf-4459d752cb6c",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        });
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BuildingNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("StreetName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BuildingNumber = "",
                            CityName = "Gdańsk",
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 560, DateTimeKind.Local).AddTicks(5893),
                            StatusId = 1,
                            StreetName = "",
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BuildingNumber = "",
                            CityName = "Roma",
                            Created = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PlaceId = 1,
                            StatusId = 1,
                            StreetName = ""
                        });
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int?>("CommentId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("ReplyId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentId");

                    b.HasIndex("PictureId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TrackId");

                    b.ToTable("Comments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 2,
                            Content = "oh, cmon, its impressive",
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 561, DateTimeKind.Local).AddTicks(4762),
                            PlaceId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Content = "nice cats",
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 561, DateTimeKind.Local).AddTicks(5680),
                            CreatedBy = "email1@email.com",
                            PictureId = 1,
                            StatusId = 1
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 2,
                            Content = "nice run",
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 561, DateTimeKind.Local).AddTicks(6703),
                            CreatedBy = "email1@email.com",
                            StatusId = 1,
                            TrackId = 1
                        });
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Coordinate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double?>("Altitude")
                        .HasColumnType("float");

                    b.Property<int?>("BasedOnGpxFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ForecastId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TrackId")
                        .HasColumnType("int");

                    b.Property<int>("TrackPointId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ForecastId")
                        .IsUnique()
                        .HasFilter("[ForecastId] IS NOT NULL");

                    b.HasIndex("PictureId")
                        .IsUnique()
                        .HasFilter("[PictureId] IS NOT NULL");

                    b.HasIndex("PlaceId")
                        .IsUnique()
                        .HasFilter("[PlaceId] IS NOT NULL");

                    b.HasIndex("TrackId");

                    b.ToTable("Coordinates");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 561, DateTimeKind.Local).AddTicks(2460),
                            Latitude = 41.890239999999999,
                            Longitude = 12.492369999999999,
                            PlaceId = 1,
                            StatusId = 1,
                            TrackPointId = 0
                        });
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Forecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ForecastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Forecasts");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.GpxFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrackId")
                        .IsUnique()
                        .HasFilter("[TrackId] IS NOT NULL");

                    b.ToTable("GpxFiles");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Picture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<double>("AvarageRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PathToImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PhotoOfPlaceId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoOfTrackId")
                        .HasColumnType("int");

                    b.Property<int?>("PhotoOnTrackId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Taken")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PhotoOfPlaceId");

                    b.HasIndex("PhotoOnTrackId");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("AvarageRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Published")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisitedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VisitorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VisitorId");

                    b.ToTable("Places");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvarageRate = 0.0,
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 561, DateTimeKind.Local).AddTicks(805),
                            Description = "Nothing special",
                            IsPrivate = false,
                            Name = "Coloseum",
                            Published = new DateTime(2022, 7, 3, 11, 47, 33, 561, DateTimeKind.Local).AddTicks(819),
                            StatusId = 1,
                            VisitedAt = new DateTime(2022, 7, 3, 11, 47, 33, 560, DateTimeKind.Local).AddTicks(9928),
                            VisitorId = 1
                        });
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PictureId")
                        .HasColumnType("int");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<int?>("TrackId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PictureId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("TrackId");

                    b.ToTable("Ratings");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            PlaceId = 1,
                            Rank = 4
                        },
                        new
                        {
                            Id = 2,
                            PlaceId = 1,
                            Rank = 5
                        },
                        new
                        {
                            Id = 3,
                            PlaceId = 1,
                            Rank = 3
                        },
                        new
                        {
                            Id = 4,
                            PlaceId = 1,
                            Rank = 1
                        },
                        new
                        {
                            Id = 5,
                            PlaceId = 1,
                            Rank = 4
                        },
                        new
                        {
                            Id = 6,
                            PlaceId = 1,
                            Rank = 4
                        },
                        new
                        {
                            Id = 7,
                            PlaceId = 1,
                            Rank = 4
                        },
                        new
                        {
                            Id = 8,
                            PlaceId = 1,
                            Rank = 4
                        },
                        new
                        {
                            Id = 9,
                            PlaceId = 1,
                            Rank = 4
                        },
                        new
                        {
                            Id = 10,
                            PlaceId = 1,
                            Rank = 4
                        },
                        new
                        {
                            Id = 11,
                            PlaceId = 1,
                            Rank = 4
                        });
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Settings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Track", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<double>("AvarageRate")
                        .HasColumnType("float");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("VisitedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Tracks");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("FriendId")
                        .HasColumnType("int");

                    b.Property<bool>("HasAddress")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Inactivated")
                        .HasColumnType("datetime2");

                    b.Property<string>("InactivatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Modified")
                        .HasColumnType("datetime2");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FriendId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 556, DateTimeKind.Local).AddTicks(626),
                            Email = "email@email.com",
                            FirstName = "Grzegorz",
                            HasAddress = true,
                            LastName = "Zukowski",
                            StatusId = 1
                        },
                        new
                        {
                            Id = 2,
                            Created = new DateTime(2022, 7, 3, 11, 47, 33, 560, DateTimeKind.Local).AddTicks(3867),
                            Email = "email1@email.com",
                            FirstName = "Someone",
                            HasAddress = false,
                            LastName = "Someone",
                            StatusId = 1
                        });
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Address", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.Place", "Place")
                        .WithOne("PlaceAddress")
                        .HasForeignKey("TouristAppBackend.Domain.Models.Address", "PlaceId");

                    b.HasOne("TouristAppBackend.Domain.Models.User", "User")
                        .WithOne("MyAddress")
                        .HasForeignKey("TouristAppBackend.Domain.Models.Address", "UserId");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Comment", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.User", "Author")
                        .WithMany("PostedComments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAppBackend.Domain.Models.Comment", null)
                        .WithMany("Replies")
                        .HasForeignKey("CommentId");

                    b.HasOne("TouristAppBackend.Domain.Models.Picture", "CommentedPicture")
                        .WithMany("Comments")
                        .HasForeignKey("PictureId");

                    b.HasOne("TouristAppBackend.Domain.Models.Place", "CommentedPlace")
                        .WithMany("Comments")
                        .HasForeignKey("PlaceId");

                    b.HasOne("TouristAppBackend.Domain.Models.Track", "CommentedTrack")
                        .WithMany("Comments")
                        .HasForeignKey("TrackId");

                    b.Navigation("Author");

                    b.Navigation("CommentedPicture");

                    b.Navigation("CommentedPlace");

                    b.Navigation("CommentedTrack");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Coordinate", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.Forecast", "Forecast")
                        .WithOne("Coordinate")
                        .HasForeignKey("TouristAppBackend.Domain.Models.Coordinate", "ForecastId");

                    b.HasOne("TouristAppBackend.Domain.Models.Picture", "Picture")
                        .WithOne("Coordinate")
                        .HasForeignKey("TouristAppBackend.Domain.Models.Coordinate", "PictureId");

                    b.HasOne("TouristAppBackend.Domain.Models.Place", "Place")
                        .WithOne("Coordinate")
                        .HasForeignKey("TouristAppBackend.Domain.Models.Coordinate", "PlaceId");

                    b.HasOne("TouristAppBackend.Domain.Models.Track", "Track")
                        .WithMany("Coordinates")
                        .HasForeignKey("TrackId");

                    b.Navigation("Forecast");

                    b.Navigation("Picture");

                    b.Navigation("Place");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Forecast", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.User", "User")
                        .WithMany("MyForecastsPlaces")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.GpxFile", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.Track", "Track")
                        .WithOne("GpxFile")
                        .HasForeignKey("TouristAppBackend.Domain.Models.GpxFile", "TrackId");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Picture", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.User", "Author")
                        .WithMany("MyPictures")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TouristAppBackend.Domain.Models.Place", "PhotoOfPlace")
                        .WithMany("PicturesOfPlace")
                        .HasForeignKey("PhotoOfPlaceId");

                    b.HasOne("TouristAppBackend.Domain.Models.Track", "PhotoOnTrack")
                        .WithMany("Pictures")
                        .HasForeignKey("PhotoOnTrackId");

                    b.Navigation("Author");

                    b.Navigation("PhotoOfPlace");

                    b.Navigation("PhotoOnTrack");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Place", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.User", "Visitor")
                        .WithMany("MyPlaces")
                        .HasForeignKey("VisitorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Visitor");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Rating", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.Picture", "Picture")
                        .WithMany("Ratings")
                        .HasForeignKey("PictureId");

                    b.HasOne("TouristAppBackend.Domain.Models.Place", "Place")
                        .WithMany("Ratings")
                        .HasForeignKey("PlaceId");

                    b.HasOne("TouristAppBackend.Domain.Models.Track", "Track")
                        .WithMany("Ratings")
                        .HasForeignKey("TrackId");

                    b.Navigation("Picture");

                    b.Navigation("Place");

                    b.Navigation("Track");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Track", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.User", "Author")
                        .WithMany("MyTracks")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.User", b =>
                {
                    b.HasOne("TouristAppBackend.Domain.Models.User", "Friend")
                        .WithMany("Friends")
                        .HasForeignKey("FriendId");

                    b.Navigation("Friend");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Comment", b =>
                {
                    b.Navigation("Replies");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Forecast", b =>
                {
                    b.Navigation("Coordinate");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Picture", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Coordinate");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Place", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Coordinate");

                    b.Navigation("PicturesOfPlace");

                    b.Navigation("PlaceAddress");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.Track", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Coordinates");

                    b.Navigation("GpxFile");

                    b.Navigation("Pictures");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("TouristAppBackend.Domain.Models.User", b =>
                {
                    b.Navigation("Friends");

                    b.Navigation("MyAddress");

                    b.Navigation("MyForecastsPlaces");

                    b.Navigation("MyPictures");

                    b.Navigation("MyPlaces");

                    b.Navigation("MyTracks");

                    b.Navigation("PostedComments");
                });
#pragma warning restore 612, 618
        }
    }
}
